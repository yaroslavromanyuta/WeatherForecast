package yaroslavromanyuta.com.ua.weatherforecast.forecast.greenDaoModel;

import java.util.List;
import yaroslavromanyuta.com.ua.weatherforecast.forecast.greenDaoModel.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "CITY".
 */
public class City {

    private Long id;
    private Integer cityId;
    private Double lon;
    private Double lat;
    private String country;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CityDao myDao;

    private List<Weather> forecast;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public City() {
    }

    public City(Long id) {
        this.id = id;
    }

    public City(Long id, Integer cityId, Double lon, Double lat, String country) {
        this.id = id;
        this.cityId = cityId;
        this.lon = lon;
        this.lat = lat;
        this.country = country;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getCityId() {
        return cityId;
    }

    public void setCityId(Integer cityId) {
        this.cityId = cityId;
    }

    public Double getLon() {
        return lon;
    }

    public void setLon(Double lon) {
        this.lon = lon;
    }

    public Double getLat() {
        return lat;
    }

    public void setLat(Double lat) {
        this.lat = lat;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Weather> getForecast() {
        if (forecast == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WeatherDao targetDao = daoSession.getWeatherDao();
            List<Weather> forecastNew = targetDao._queryCity_Forecast(id);
            synchronized (this) {
                if(forecast == null) {
                    forecast = forecastNew;
                }
            }
        }
        return forecast;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetForecast() {
        forecast = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
