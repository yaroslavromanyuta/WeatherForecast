package yaroslavromanyuta.com.ua.weatherforecast.forecast.greenDaoModel;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import yaroslavromanyuta.com.ua.weatherforecast.forecast.greenDaoModel.Weather;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEATHER".
*/
public class WeatherDao extends AbstractDao<Weather, Long> {

    public static final String TABLENAME = "WEATHER";

    /**
     * Properties of entity Weather.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property Temp = new Property(2, Double.class, "temp", false, "TEMP");
        public final static Property Pressure = new Property(3, Double.class, "pressure", false, "PRESSURE");
        public final static Property Humidity = new Property(4, Integer.class, "humidity", false, "HUMIDITY");
        public final static Property Main = new Property(5, String.class, "main", false, "MAIN");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property Icon = new Property(7, String.class, "icon", false, "ICON");
        public final static Property Clouds = new Property(8, Integer.class, "clouds", false, "CLOUDS");
        public final static Property WindSpeed = new Property(9, Double.class, "windSpeed", false, "WIND_SPEED");
        public final static Property WindDeg = new Property(10, Double.class, "windDeg", false, "WIND_DEG");
        public final static Property Rain = new Property(11, Integer.class, "rain", false, "RAIN");
        public final static Property Snow = new Property(12, Integer.class, "snow", false, "SNOW");
        public final static Property CityId = new Property(13, Long.class, "cityId", false, "CITY_ID");
    };

    private DaoSession daoSession;

    private Query<Weather> city_ForecastQuery;

    public WeatherDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" INTEGER," + // 1: date
                "\"TEMP\" REAL," + // 2: temp
                "\"PRESSURE\" REAL," + // 3: pressure
                "\"HUMIDITY\" INTEGER," + // 4: humidity
                "\"MAIN\" TEXT," + // 5: main
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"ICON\" TEXT," + // 7: icon
                "\"CLOUDS\" INTEGER," + // 8: clouds
                "\"WIND_SPEED\" REAL," + // 9: windSpeed
                "\"WIND_DEG\" REAL," + // 10: windDeg
                "\"RAIN\" INTEGER," + // 11: rain
                "\"SNOW\" INTEGER," + // 12: snow
                "\"CITY_ID\" INTEGER);"); // 13: cityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Weather entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        Double temp = entity.getTemp();
        if (temp != null) {
            stmt.bindDouble(3, temp);
        }
 
        Double pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindDouble(4, pressure);
        }
 
        Integer humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindLong(5, humidity);
        }
 
        String main = entity.getMain();
        if (main != null) {
            stmt.bindString(6, main);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(8, icon);
        }
 
        Integer clouds = entity.getClouds();
        if (clouds != null) {
            stmt.bindLong(9, clouds);
        }
 
        Double windSpeed = entity.getWindSpeed();
        if (windSpeed != null) {
            stmt.bindDouble(10, windSpeed);
        }
 
        Double windDeg = entity.getWindDeg();
        if (windDeg != null) {
            stmt.bindDouble(11, windDeg);
        }
 
        Integer rain = entity.getRain();
        if (rain != null) {
            stmt.bindLong(12, rain);
        }
 
        Integer snow = entity.getSnow();
        if (snow != null) {
            stmt.bindLong(13, snow);
        }
 
        Long cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindLong(14, cityId);
        }
    }

    @Override
    protected void attachEntity(Weather entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Weather readEntity(Cursor cursor, int offset) {
        Weather entity = new Weather( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // temp
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // pressure
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // humidity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // main
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // icon
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // clouds
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // windSpeed
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // windDeg
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // rain
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // snow
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // cityId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Weather entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setTemp(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setPressure(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setHumidity(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMain(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIcon(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClouds(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setWindSpeed(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setWindDeg(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setRain(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setSnow(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setCityId(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Weather entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Weather entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "forecast" to-many relationship of City. */
    public List<Weather> _queryCity_Forecast(Long cityId) {
        synchronized (this) {
            if (city_ForecastQuery == null) {
                QueryBuilder<Weather> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CityId.eq(null));
                city_ForecastQuery = queryBuilder.build();
            }
        }
        Query<Weather> query = city_ForecastQuery.forCurrentThread();
        query.setParameter(0, cityId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCityDao().getAllColumns());
            builder.append(" FROM WEATHER T");
            builder.append(" LEFT JOIN CITY T0 ON T.\"CITY_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Weather loadCurrentDeep(Cursor cursor, boolean lock) {
        Weather entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        City city = loadCurrentOther(daoSession.getCityDao(), cursor, offset);
        entity.setCity(city);

        return entity;    
    }

    public Weather loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Weather> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Weather> list = new ArrayList<Weather>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Weather> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Weather> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
